# Publish to Maven Central using JReleaser
# This workflow will publish the library when a release is created on GitHub

name: Publish with JReleaser

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for jreleaser git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Publish to Maven Central via JReleaser
        env:
          # Library version from release tag
          LIBRARY_VERSION: ${{ github.event.release.tag_name }}
          # GitHub token for jreleaser (already provided by GitHub Actions)
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Map existing Maven Central secrets to jreleaser variables
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_CENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_CENTRAL_PASSWORD }}
          # Map existing GPG secrets to jreleaser variables
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.ORG_GRADLE_PROJECT_GPG_SIGNING_IN_MEMORY_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.ORG_GRADLE_PROJECT_GPG_SIGNING_IN_MEMORY_KEY_PWD }}
        run: |
          ./gradlew :DittoToolsAndroid:jreleaserFullRelease
